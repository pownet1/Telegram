{"version":3,"mappings":"4GAaA,IAAIA,EAEJ,MAAMC,EAAiB,SAAW,CAChC,KAAM,CAAC,OAAM,QAAO,UAAUD,EAC1B,MACA,IACQE,WAAS,WAAW,YAAYC,CAAI,EAC9C,MAAMC,EAAgB,MAAMF,EAAU,SAAS,WAAW,UAAU,mCAAoC,CACtG,OAAQG,EAAI,GACZ,SAAUA,EAAI,KACd,eAAgBC,CACf,GAAC,OAAM,aAAc,EAAK,GAE1BF,EAAc,IAAM,sBACrBF,EAAU,SAAS,WAAW,QAAQE,EAAc,IAAI,QAIpDG,GACN,OAAQA,EAAiB,KAAM,CAC7B,IAAK,0BAA2B,CAC7BA,EAAiB,QAAU,GAC5BC,QAAiB,OAAO,4BAAgB,mMACxC,KACF,CAEA,QAAS,CACC,cAAM,8BAA+BD,CAAG,EAC1C,QAAeE,EAAW,UAAU,EACvCC,IAAiB,kBAAmBF,EAAiBG,aAAO,0BAAc,6NACrED,IAAiB,oBAAmBF,EAAiBG,aAAO,0BAAc,uJAClF,KACF,CACF,CACF,CAEA,SAAS,KAAOC,GAAQ,OAAS,YAAc,mBAAmBA,CAAM,EAAI,GACzEJ,GACDA,EAAe,KAAMK,GAAMA,EAAE,QAAQ,OAAO,CAEhD,EAEMC,EAAO,IAAIC,EAAK,kBAAmB,GAAM,IAAM,CACtCC,IAAK,OAAO,kBAAmB,EAAI,EACjCf,GACjB,EAAIgB,GAAuB,CAClBjB,IACGE,WAAS,gBAAgB,YAAY,YAAa,CAAC,EAAG,sBAAuB,OAAK,CAC9F,CAAC","names":["data","importWebToken","rootScope","dcId","authorization","App","token","err","mountPageAfter","STATE_INIT","defaultState","__vitePreload","tgAddr","m","page","Page","putPreloader","_data"],"sources":["../src/pages/pageSignImport.ts"],"sourcesContent":["/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport {putPreloader} from '../components/putPreloader';\r\nimport App from '../config/app';\r\nimport {STATE_INIT} from '../config/state';\r\nimport rootScope from '../lib/rootScope';\r\nimport {AuthState} from '../types';\r\nimport Page from './page';\r\n\r\nlet data: AuthState.signImport['data'];\r\n\r\nconst importWebToken = async() => {\r\n  const {dcId, token, tgAddr} = data;\r\n  let mountPageAfter: Promise<{default: Page}>;\r\n  try {\r\n    rootScope.managers.apiManager.setBaseDcId(dcId);\r\n    const authorization = await rootScope.managers.apiManager.invokeApi('auth.importWebTokenAuthorization', {\r\n      api_id: App.id,\r\n      api_hash: App.hash,\r\n      web_auth_token: token\r\n    }, {dcId, ignoreErrors: true});\r\n\r\n    if(authorization._ === 'auth.authorization') {\r\n      rootScope.managers.apiManager.setUser(authorization.user);\r\n      // mountPageAfter = import('./pageIm');\r\n      // return;\r\n    }\r\n  } catch(err) {\r\n    switch((err as ApiError).type) {\r\n      case 'SESSION_PASSWORD_NEEDED': {\r\n        (err as ApiError).handled = true;\r\n        mountPageAfter = import('./pagePassword');\r\n        break;\r\n      }\r\n\r\n      default: {\r\n        console.error('authorization import error:', err);\r\n        const defaultState = STATE_INIT.authState._;\r\n        if(defaultState === 'authStateSignIn') mountPageAfter = import('./pageSignIn');\r\n        else if(defaultState === 'authStateSignQr') mountPageAfter = import('./pageSignQR');\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  location.hash = tgAddr?.trim() ? '#?tgaddr=' + encodeURIComponent(tgAddr) : '';\r\n  if(mountPageAfter) {\r\n    mountPageAfter.then((m) => m.default.mount());\r\n  }\r\n};\r\n\r\nconst page = new Page('page-signImport', true, () => {\r\n  putPreloader(page.pageEl.firstElementChild, true);\r\n  importWebToken();\r\n}, (_data: typeof data) => {\r\n  data = _data;\r\n  rootScope.managers.appStateManager.pushToState('authState', {_: 'authStateSignImport', data});\r\n});\r\n\r\nexport default page;\r\n"],"file":"pageSignImport-7e474955.js"}